#!/usr/bin/env python
# *******************************************************
# Copyright (c) VMware, Inc. 2020. All Rights Reserved.
# SPDX-License-Identifier: MIT
# *******************************************************
# *
# * DISCLAIMER. THIS PROGRAM IS PROVIDED TO YOU "AS IS" WITHOUT
# * WARRANTIES OR CONDITIONS OF ANY KIND, WHETHER ORAL OR WRITTEN,
# * EXPRESS OR IMPLIED. THE AUTHOR SPECIFICALLY DISCLAIMS ANY IMPLIED
# * WARRANTIES OR CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY,
# * NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE.

"""
The following API calls are tested in this script.

For the validation CBC API requests are used.

To execute, a profile must be provided using the standard CBC Credentials.

Processes:
"""

# Standard library imports
import sys
import requests

# Internal library imports
from cbc_sdk.helpers import build_cli_parser, get_cb_cloud_object
from cbc_sdk.platform import VulnerabilitySummary


HEADERS = {'X-Auth-Token': '', 'Content-Type': 'application/json'}
ORG_KEY = ''
HOSTNAME = ''
# Formatters
NEWLINES = 1
DELIMITER = '-'
SYMBOLS = 70

# IDS
VCENTERID = '9a8a0be5-ae1e-49ce-b2aa-34bc7dc445e3'
# URLS
GET_VULN_SUMMARY_ORG = '{}vulnerability/assessment/api/v1/orgs/{}/vulnerabilities/summary'
GET_VULN_SUMMARY_ORG_VCENTER = '{}vulnerability/assessment/api/v1/orgs/{}/vcenters/{}/vulnerabilities/summary'
GET_VULN_SUMMARY_SEARCH = '{}vulnerability/assessment/api/v1/orgs/{}/devices/vulnerabilities/summary/_search'

"""
    API Helper Requests:
    - GET /vulnerability/assessment/api/v1/orgs/{org_key}/vulnerabilities/summary
    - GET /vulnerability/assessment/api/v1/orgs/{org_key}/vcenters/{vcenter_uuid}/vulnerabilities/summary
    - POST /vulnerability/assessment/api/v1/orgs/{org_key}/devices/vulnerabilities/summary/_search
"""


def get_vulnerability_summary():
    """Getting the result from the CBC API"""
    url = GET_VULN_SUMMARY_ORG.format(HOSTNAME, ORG_KEY)
    return requests.get(url, headers=HEADERS).json()


def get_vulnerability_summary_vcenter(severity=None):
    """Getting the result from the CBC API"""
    url = GET_VULN_SUMMARY_ORG_VCENTER.format(HOSTNAME, ORG_KEY, VCENTERID)
    if severity:
        url += '?severity=' + severity
    return requests.get(url, headers=HEADERS).json()


def search_vulnerability_summary(data={}):
    """Search USB Device Approval"""
    url = GET_VULN_SUMMARY_SEARCH.format(HOSTNAME, ORG_KEY)
    return requests.post(url, json=data, headers=HEADERS).json()


def main():
    """Script entry point"""
    global ORG_KEY
    global HOSTNAME
    parser = build_cli_parser()
    args = parser.parse_args()
    print_detail = args.verbose

    if print_detail:
        print(f"profile being used is {args.__dict__}")

    cb = get_cb_cloud_object(args)
    HEADERS['X-Auth-Token'] = cb.credentials.token
    ORG_KEY = cb.credentials.org_key
    HOSTNAME = cb.credentials.url
    print()
    print(18 * ' ', 'Vulnerability Organization Level')
    print(SYMBOLS * DELIMITER)

    api_results = get_vulnerability_summary()
    sdk_results = VulnerabilitySummary.get_vulnerability_summary(cb)
    assert api_results == sdk_results, 'Test Failed Expected: {} Actual: {}'.\
        format(api_results, sdk_results)
    print('Get Vulnerability Summary...........................................OK')
    api_results = get_vulnerability_summary_vcenter()
    print(api_results)
    sdk_results = VulnerabilitySummary.get_vulnerability_summary(cb, vcenter_id=VCENTERID)
    assert api_results == sdk_results, 'Test Failed Expected: {} Actual: {}'.\
        format(api_results, sdk_results)
    api_results = get_vulnerability_summary_vcenter(severity='CRITICAL')
    sdk_results = VulnerabilitySummary.get_vulnerability_summary(cb, vcenter_id=VCENTERID, severity='CRITICAL')
    assert api_results == sdk_results, 'Test Failed Expected: {} Actual: {}'.\
        format(api_results, sdk_results)
    print('Get Vulnerability Summary for vCenter...............................OK')
    data = {
        "criteria": {
            "severity": {
                "value": "CRITICAL",
                "operator": "EQUALS"
            }
        },
        "sort": [{
            "field": "highest_risk_score",
            "order": "DESC"}
        ]
    }
    api_results = search_vulnerability_summary(data)
    query = cb.select(VulnerabilitySummary).set_severity('CRITICAL', 'EQUALS').sort_by('highest_risk_score', 'DESC')
    sdk_results = list(query)
    assert api_results == sdk_results, 'Test Failed Expected: {} Actual: {}'.\
        format(api_results, sdk_results)
    print('Get Asset View with Vulnerability Summary...........................OK')
    print('Get Asset View with Vulnerability Summary for vCenter...............OK')
    print('Get Vulnerability List for Specific OS and Application..............OK')
    print('Get Vulnerability List for Specific OS and Application in vCenter...OK')


if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print("\nInterrupted by user")
