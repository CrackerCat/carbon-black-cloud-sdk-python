#!/usr/bin/env python
# *******************************************************
# Copyright (c) VMware, Inc. 2021. All Rights Reserved.
# SPDX-License-Identifier: MIT
# *******************************************************
# *
# * DISCLAIMER. THIS PROGRAM IS PROVIDED TO YOU "AS IS" WITHOUT
# * WARRANTIES OR CONDITIONS OF ANY KIND, WHETHER ORAL OR WRITTEN,
# * EXPRESS OR IMPLIED. THE AUTHOR SPECIFICALLY DISCLAIMS ANY IMPLIED
# * WARRANTIES OR CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY,
# * NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE.

"""
The following API calls are tested in this script.

For the validation CBC API requests are used.

To execute, a profile must be provided using the standard CBC Credentials.

Processes:
- Get a Vulnerability Summary at the organization level - with/without severity
- Retrieve a device list with a Vulnerability Summary.
- Get Vulnerability List for Specific OS and Application

- Get an Operating System or Application Vulnerability Summary for a specific device.
- Get an Operating System or Application Vulnerability List for a specific device.
- Perform an action on a specific device.

- Get a list of assets affected by a specific vulnerability CVE ID.
- Get vulnerability details for a specific CVE ID.

"""

# Standard library imports
import sys
import requests

# Internal library imports
from cbc_sdk.helpers import build_cli_parser, get_cb_cloud_object
from cbc_sdk.workload import VulnerabilitySummary, OrganizationalVulnerability, DeviceVulnerability, Vulnerability
from cbc_sdk.platform import Device


HEADERS = {'X-Auth-Token': '', 'Content-Type': 'application/json'}
ORG_KEY = ''
HOSTNAME = ''
# Formatters
NEWLINES = 1
DELIMITER = '-'
SYMBOLS = 70

# IDS
DEVICE_ID = 8646692
CVE_ID = 'CVE-2019-0708'

# URLS
# Organizational Level
GET_VULN_SUMMARY_ORG = '{}vulnerability/assessment/api/v1/orgs/{}/vulnerabilities/summary'
GET_VULN_SUMMARY_SEARCH = '{}vulnerability/assessment/api/v1/orgs/{}/devices/vulnerabilities/summary/_search'
GET_ORG_VULN_SEARCH = '{}vulnerability/assessment/api/v1/orgs/{}/devices/vulnerabilities/_search'

# Device Vulnerability Level
GET_DEVICE_VULN_SUMMARY = '{}vulnerability/assessment/api/v1/orgs/{}/devices/{}/vulnerabilities/summary'
GET_DEVICE_VULN_LIST = '{}vulnerability/assessment/api/v1/orgs/{}/devices/{}/vulnerabilities/_search'
DEVICE_PERFORM_ACTION = '{}vulnerability/assessment/api/v1/orgs/{}/devices/{}/device_actions'

# Vulnerability level
GET_VULNERABILITY = '{}vulnerability/assessment/api/v1/vulnerabilities/{}'
GET_AFFECTED_DEVICES = '{}vulnerability/assessment/api/v1/orgs/{}/vulnerabilities/{}/devices'

# Vulnerability Level
"""
    API Helper Requests:
    - GET /vulnerability/assessment/api/v1/orgs/{org_key}/vulnerabilities/summary
    - POST /vulnerability/assessment/api/v1/orgs/{org_key}/devices/vulnerabilities/summary/_search
    - POST /vulnerability/assessment/api/v1/orgs/{org_key}/devices/vulnerabilities/_search

    - GET /vulnerability/assessment/api/v1/orgs/{org_key}/devices/{device_id}/vulnerabilities/summary
    - POST /vulnerability/assessment/api/v1/orgs/{org_key}/devices/{device_id}/vulnerabilities/_search
    - POST <cbc-hostname>/vulnerability/assessment/api/v1/orgs/{org_key}/devices/{device_id}/device_actions

    - POST /vulnerability/assessment/api/v1/orgs/{org_key}/vulnerabilities/{cveId}/devices
    - GET /vulnerability/assessment/api/v1/vulnerabilities/{cveId}
"""

""" Organization Level """


def get_vulnerability_summary(severity=None):
    """Getting the result from the CBC API"""
    url = GET_VULN_SUMMARY_ORG.format(HOSTNAME, ORG_KEY)
    if severity:
        url += '?severity=' + severity
    return requests.get(url, headers=HEADERS).json()


def search_vulnerability_summary(data={}):
    """Retrieve a device list with a Vulnerability Summary."""
    url = GET_VULN_SUMMARY_SEARCH.format(HOSTNAME, ORG_KEY)
    return requests.post(url, json=data, headers=HEADERS).json()


def search_org_vulnerability(data={}):
    """Get Vulnerability List for Specific OS and Application"""
    url = GET_ORG_VULN_SEARCH.format(HOSTNAME, ORG_KEY)
    return requests.post(url, json=data, headers=HEADERS).json()


""" Device Level """


def get_specific_device_summary(device_id=DEVICE_ID):
    """Get an Operating System or Application Vulnerability Summary for a specific device."""
    url = GET_DEVICE_VULN_SUMMARY.format(HOSTNAME, ORG_KEY, device_id)
    return requests.get(url, headers=HEADERS).json()


def get_specific_device_list(data={}):
    """Get an Operating System or Application Vulnerability List for a specific device."""
    url = GET_DEVICE_VULN_LIST.format(HOSTNAME, ORG_KEY, DEVICE_ID)
    return requests.post(url, json=data, headers=HEADERS).json()


def refresh_device(data={'action_type': 'REFRESH'}):
    """Perform an action on a specific device."""
    url = DEVICE_PERFORM_ACTION.format(HOSTNAME, ORG_KEY, DEVICE_ID)
    return requests.post(url, json=data, headers=HEADERS).json()


""" Vulnerability level """


def get_vulnerability():
    """Get vulnerability details for a specific CVE ID."""
    url = GET_VULNERABILITY.format(HOSTNAME, CVE_ID)
    result = requests.get(url, headers=HEADERS).json()
    result['cve_id'] = CVE_ID
    return result


def get_affected_devices(data={}):
    """Get Affected Assets for Specific Vulnerability"""
    url = GET_AFFECTED_DEVICES.format(HOSTNAME, ORG_KEY, CVE_ID)
    return requests.post(url, json=data, headers=HEADERS).json()


def main():
    """Script entry point"""
    global ORG_KEY
    global HOSTNAME
    parser = build_cli_parser()
    args = parser.parse_args()
    print_detail = args.verbose

    if print_detail:
        print(f"profile being used is {args.__dict__}")

    cb = get_cb_cloud_object(args)
    HEADERS['X-Auth-Token'] = cb.credentials.token
    ORG_KEY = cb.credentials.org_key
    HOSTNAME = cb.credentials.url

    print()
    print(18 * ' ', 'Vulnerability Organization Level')
    print(SYMBOLS * DELIMITER)

    api_results = get_vulnerability_summary()
    sdk_results = VulnerabilitySummary.get_org_vulnerability_summary(cb)
    assert api_results == sdk_results, 'Test Failed Expected: {} Actual: {}'.\
        format(api_results, sdk_results)
    print('Get Vulnerability Summary...........................................OK')
    api_results = get_vulnerability_summary(severity='LOW')
    sdk_results = VulnerabilitySummary.get_org_vulnerability_summary(cb, severity='LOW')
    assert api_results == sdk_results, 'Test Failed Expected: {} Actual: {}'.\
        format(api_results, sdk_results)
    print('Get Vulnerability Summary with severity.............................OK')
    data = {
        "criteria": {
            "severity": {
                "value": "LOW",
                "operator": "EQUALS"
            },
            "os_type": {
                "value": "WINDOWS",
                "operator": "EQUALS"
            }
        }
    }
    api_results = search_vulnerability_summary(data)['results']
    query = cb.select(VulnerabilitySummary).set_severity('LOW', 'EQUALS') \
                                           .set_os_type('WINDOWS', 'EQUALS')
    sdk_results = [x._info for x in query]
    assert api_results == sdk_results, 'Test Failed Expected: {} Actual: {}'.\
        format(api_results, sdk_results)
    print('Get Asset View with Vulnerability Summary...........................OK')

    data = {'criteria': {'severity': {'value': 'LOW', 'operator': 'EQUALS'}}}
    api_results = search_org_vulnerability(data=data)['results']
    query = cb.select(OrganizationalVulnerability).set_severity('LOW', 'EQUALS')
    sdk_results = [x._info for x in query]
    assert api_results == sdk_results, 'Test Failed Expected: {} Actual: {}'.\
        format(api_results, sdk_results)
    print('Get Vulnerability List for Specific OS and Application..............OK')

    print()
    print(22 * ' ', 'Device Vulnerability Level')
    print(SYMBOLS * DELIMITER)

    api_results = get_specific_device_summary()
    device = cb.select(Device, DEVICE_ID)
    sdk_results = DeviceVulnerability.get_vulnerability_summary_per_device(cb, device)
    assert api_results == sdk_results, 'Test Failed Expected: {} Actual: {}'.\
        format(api_results, sdk_results)
    print('Get Vulnerability Summary for a specific device.....................OK')

    query = device.get_vulnerabilties()
    api_results = get_specific_device_list()['results']
    sdk_results = [x._info for x in query]
    assert api_results == sdk_results, 'Test Failed Expected: {} Actual: {}'.\
        format(api_results, sdk_results)
    print('Get Vulnerability Summary for a specific device.....................OK')

    sdk_results = device.vulnerability_refresh()
    sdk_results.pop('updated_at')
    api_results = refresh_device()
    api_results.pop('updated_at')
    assert api_results == sdk_results, 'Test Failed Expected: {} Actual: {}'.\
        format(api_results, sdk_results)
    print('Perform an action on a specific device..............................OK')

    print()
    print(25 * ' ', 'Vulnerability Level')
    print(SYMBOLS * DELIMITER)

    api_results = get_vulnerability()
    vulnerability = Vulnerability(cb, CVE_ID)
    assert api_results == vulnerability._info, 'Test Failed Expected: {} Actual: {}'.\
        format(api_results, vulnerability._info)
    print('Get vulnerability details for a specific CVE ID.....................OK')

    api_results = get_affected_devices(data={'os_product_id': '313_0'})['results']
    query = vulnerability.affected_assets('313_0')
    sdk_results = []
    for x in query:
        sdk_results.append({'device_id': x.id, 'type': x.deployment_type, 'name': x.vm_name})
    for x in api_results:
        x.pop('vm_id')
    assert api_results == sdk_results, 'Test Failed Expected: {} Actual: {}'.\
        format(api_results, sdk_results)
    print('Get Affected Assets for Specific Vulnerability......................OK')


if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print("\nInterrupted by user")
